# -*- coding: utf-8 -*-
"""
Created on Mon Jul 24 11:14:44 2023

@author: Minhyuk
"""

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'connect_commander_final.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import socket
from datetime import datetime as dt
import binascii
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QListWidget, QListWidgetItem
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt
import glob
import pandas as pd
import numpy as np
from scipy.signal import find_peaks
from scipy.optimize import curve_fit
from matplotlib.animation import FuncAnimation
import matplotlib as mpl
import matplotlib.style
import matplotlib.dates as mdates
import matplotlib.colors as colors
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib import gridspec
import time
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from concurrent.futures import ProcessPoolExecutor

# prepare socket
socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# logo file path
Logo_filename_path = r'SSIL_logo.PNG'
save_path = r'C:\Users\SSIL_B104_1\Desktop\자료 수신 장치\LUSEM_GUI_TEST\GUI_TEST_4(20230719_DATA 함수 구현)'

# UI

# UI (button)
# pushButton : Connect to
# psuhButton_2 : Disconnect
# pushButton_3 : Write to
# pushButton_4 : New
# pushButton_5 : Execute
# pushButton_6 : Start
# pushButton_8 : Clear
# pushButton_7 : Graph total save
# pushButton_9 : Graph SOH save

# UI (lineEdit)
# lineEdit : IP
# lineEdit_2 : port
# lineEdit_3 : nbyte
# lineEdit_4 : save_filename
# lineEdit_13 : interval second

# UI (listView)
# listView : byte per sec / disconnect

# UI (timeEdit)
# timeEdit : parsing start time
# timeEdit_2 : parsing stop time
# timeEdit_3 : poll interval time

# UI (check box)
# checkBox : poll interval second apply

# UI (Graphic viewer)
# graphicsView : Total graph
# graphicsView_9 : SOH graph


# main class

class Ui_MainWindow(object):
    #%% initial
    def __init__(self):
        # 변수 추가
        self.IP = ""
        self.port = ""
        self.nbyte =""
        self.filename_current = str(dt.now())
        self.hex_data = ""
        self.comm_stop = 0
        
        self.start_time = pd.DataFrame()
        self.end_time = pd.DataFrame()
        
        self.st_str = ""
        self.et_str = ""
        self.t_delta =""
        
        
        #science
        self.sci_a = pd.DataFrame()
        self.sci_b = pd.DataFrame()
        self.fig_num = 0
        self.logmap = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
        32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
        64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 
        128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216, 224, 232, 240, 248, 
        256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432, 448, 464, 480, 496,
        512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992,
        1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984,
        2048, 2176, 2304, 2432, 2560, 2688, 2816, 2944, 3072, 3200, 3328, 3456, 3584, 3712, 3840, 3968,
        4096, 4352, 4608, 4864, 5120, 5376, 5632, 5888, 6144, 6400, 6656, 6912, 7168, 7424, 7680, 7936,
        8192, 8704, 9216, 9728, 10240, 10752, 11264, 11776, 12288, 12800, 13312, 13824, 14336, 14848, 15360, 15872,
        16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, 30720, 31744,
        32768, 34816, 36864, 38912, 40960, 43008, 45056, 47104, 49152, 51200, 53248, 55296, 57344, 59392, 61440, 63488,
        65536, 69632, 73728, 77824, 81920, 86016, 90112, 94208, 98304, 102400, 106496, 110592, 114688, 118784, 122880, 126976,
        131072, 139264, 147456, 155648, 163840, 172032, 180224, 188416, 196608, 204800, 212992, 221184, 229376, 237568, 245760, 253952]
        
        self.sci_a.columns = []
        self.sci_b.columns = []
        
        self.sci_header = ""
        self.ct_list = []
        self.mapid =""
        self.mapid_min =""
        self.mapid_max=""
        self.comp_type=""
        self.comp_min=""
        self.comp_max=""
        
        # sci shade
        self.shade_min = np.array([])
        self.shade_max = np.array([])
        
        # noise
        self.noi_header =""
        self.noi_cal = []
        self.noi_num =0
        
        # soh
        self.soh_rate = pd.DataFrame()
        self.soh_fig = plt.figure(num=1, figsize=(16,12))
        
        # soh plot
        self.ani_soh =""
        
        #science plot
# =============================================================================
#         self.plt1, self.plt2, self.plt3
#         self.ani_sci
# =============================================================================
        self.sci_fig = plt.figure(num=3, figsize=(16,12))
        
    # Define the logmap dictionary here
        # save 
        self.start_time =""
        self.start_dd = ""
        self.start_hh = ""
        self.start_mm = ""
        self.start_ss = ""
        
        self.stop_time =""
        self.stop_dd = ""
        self.stop_hh = ""
        self.stop_ss = ""
        
        self.time_sci =0
        self.time_sci_iso = 0
        self.time_soh =0
        self.time_soh_iso = 0
        self.time_noi =0
        self.time_noi_iso = 0
        
    #%% SetupUi  
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(795, 802)
        MainWindow.setWindowIcon(QIcon(Logo_filename_path))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMaximumSize(QtCore.QSize(1480, 919))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.groupBox = QtWidgets.QGroupBox(self.tab)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 501, 101))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(10, 40, 75, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(90, 40, 150, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(90, 20, 21, 20))
        self.label.setObjectName("label")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setGeometry(QtCore.QRect(250, 40, 91, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_2.sizePolicy().hasHeightForWidth())
        self.lineEdit_2.setSizePolicy(sizePolicy)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(250, 20, 31, 20))
        self.label_3.setObjectName("label_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_3.setGeometry(QtCore.QRect(350, 40, 51, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_3.sizePolicy().hasHeightForWidth())
        self.lineEdit_3.setSizePolicy(sizePolicy)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(410, 40, 75, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setObjectName("pushButton_2")
        self.listView = QtWidgets.QListView(self.groupBox)
        self.listView.setGeometry(QtCore.QRect(10, 70, 481, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listView.sizePolicy().hasHeightForWidth())
        self.listView.setSizePolicy(sizePolicy)
        self.listView.setObjectName("listView")
        self.label_8 = QtWidgets.QLabel(self.groupBox)
        self.label_8.setGeometry(QtCore.QRect(350, 20, 31, 20))
        self.label_8.setObjectName("label_8")
        self.groupBox_3 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 200, 431, 161))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_3.sizePolicy().hasHeightForWidth())
        self.groupBox_3.setSizePolicy(sizePolicy)
        self.groupBox_3.setObjectName("groupBox_3")
        self.timeEdit_2 = QtWidgets.QTimeEdit(self.groupBox_3)
        self.timeEdit_2.setGeometry(QtCore.QRect(190, 60, 82, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.timeEdit_2.sizePolicy().hasHeightForWidth())
        self.timeEdit_2.setSizePolicy(sizePolicy)
        self.timeEdit_2.setObjectName("timeEdit_2")
        self.label_4 = QtWidgets.QLabel(self.groupBox_3)
        self.label_4.setGeometry(QtCore.QRect(11, 31, 173, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setTextFormat(QtCore.Qt.RichText)
        self.label_4.setScaledContents(True)
        self.label_4.setObjectName("label_4")
        self.timeEdit = QtWidgets.QTimeEdit(self.groupBox_3)
        self.timeEdit.setGeometry(QtCore.QRect(190, 32, 82, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.timeEdit.sizePolicy().hasHeightForWidth())
        self.timeEdit.setSizePolicy(sizePolicy)
        self.timeEdit.setObjectName("timeEdit")
        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.label_5.setGeometry(QtCore.QRect(11, 60, 163, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setTextFormat(QtCore.Qt.RichText)
        self.label_5.setScaledContents(True)
        self.label_5.setObjectName("label_5")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_4.setGeometry(QtCore.QRect(350, 90, 75, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 90, 75, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_4.setGeometry(QtCore.QRect(93, 91, 251, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_4.sizePolicy().hasHeightForWidth())
        self.lineEdit_4.setSizePolicy(sizePolicy)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_8.setGeometry(QtCore.QRect(350, 120, 75, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_6.setGeometry(QtCore.QRect(10, 120, 75, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_6.sizePolicy().hasHeightForWidth())
        self.pushButton_6.setSizePolicy(sizePolicy)
        self.pushButton_6.setObjectName("pushButton_6")
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 120, 501, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        self.groupBox_2.setObjectName("groupBox_2")
        self.timeEdit_3 = QtWidgets.QTimeEdit(self.groupBox_2)
        self.timeEdit_3.setGeometry(QtCore.QRect(20, 30, 66, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.timeEdit_3.sizePolicy().hasHeightForWidth())
        self.timeEdit_3.setSizePolicy(sizePolicy)
        self.timeEdit_3.setObjectName("timeEdit_3")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_2)
        self.checkBox.setGeometry(QtCore.QRect(120, 30, 96, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox.sizePolicy().hasHeightForWidth())
        self.checkBox.setSizePolicy(sizePolicy)
        self.checkBox.setObjectName("checkBox")
        self.lineEdit_13 = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_13.setGeometry(QtCore.QRect(230, 30, 91, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_13.sizePolicy().hasHeightForWidth())
        self.lineEdit_13.setSizePolicy(sizePolicy)
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label_2.setGeometry(QtCore.QRect(330, 30, 59, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setTextFormat(QtCore.Qt.RichText)
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_5.setGeometry(QtCore.QRect(410, 30, 75, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        self.pushButton_5.setObjectName("pushButton_5")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab_2)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.pushButton_7 = QtWidgets.QPushButton(self.tab_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout_2.addWidget(self.pushButton_7, 1, 0, 1, 1)
        self.graphicsView = QtWidgets.QGraphicsView(self.tab_2)
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout_2.addWidget(self.graphicsView, 2, 0, 1, 1)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_3)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.pushButton_9 = QtWidgets.QPushButton(self.tab_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())
        self.pushButton_9.setSizePolicy(sizePolicy)
        self.pushButton_9.setObjectName("pushButton_9")
        self.gridLayout_3.addWidget(self.pushButton_9, 1, 0, 1, 1)
        self.graphicsView_9 = QtWidgets.QGraphicsView(self.tab_3)
        self.graphicsView_9.setObjectName("graphicsView_9")
        self.gridLayout_3.addWidget(self.graphicsView_9, 2, 0, 1, 1)
        self.tabWidget.addTab(self.tab_3, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 795, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.pushButton, self.lineEdit)
        MainWindow.setTabOrder(self.lineEdit, self.lineEdit_2)
        MainWindow.setTabOrder(self.lineEdit_2, self.lineEdit_3)
        MainWindow.setTabOrder(self.lineEdit_3, self.pushButton_2)
        MainWindow.setTabOrder(self.pushButton_2, self.listView)
        MainWindow.setTabOrder(self.listView, self.timeEdit_3)
        MainWindow.setTabOrder(self.timeEdit_3, self.checkBox)
        MainWindow.setTabOrder(self.checkBox, self.lineEdit_13)
        MainWindow.setTabOrder(self.lineEdit_13, self.pushButton_5)
        MainWindow.setTabOrder(self.pushButton_5, self.timeEdit)
        MainWindow.setTabOrder(self.timeEdit, self.timeEdit_2)
        MainWindow.setTabOrder(self.timeEdit_2, self.pushButton_3)
        MainWindow.setTabOrder(self.pushButton_3, self.lineEdit_4)
        MainWindow.setTabOrder(self.lineEdit_4, self.pushButton_4)
        MainWindow.setTabOrder(self.pushButton_4, self.pushButton_6)
        MainWindow.setTabOrder(self.pushButton_6, self.pushButton_8)
        MainWindow.setTabOrder(self.pushButton_8, self.pushButton_7)
        MainWindow.setTabOrder(self.pushButton_7, self.graphicsView)
        MainWindow.setTabOrder(self.graphicsView, self.pushButton_9)
        MainWindow.setTabOrder(self.pushButton_9, self.graphicsView_9)
        
        #%% 버튼 클릭
        self.pushButton.clicked.connect(self.button_event_conn)
        self.pushButton_2.clicked.connect(self.button_event_disconn)
    
        #%% Graphics viewer
        self.test_figure = plt.figure(num=3, figsize=(16,12))
        self.canvas1 = FigureCanvas(self.sci_fig)
        self.canvas2 = FigureCanvas(self.soh_fig)
        self.test_canvas = FigureCanvas(self.test_figure)
        #%% listViewer
        
    #%% button_event_connect_to
    # 서버 연결 (connect to)
    # Connect button
    def button_event_conn(self):
        self.IP = self.lineEdit.text()
        self.port = int(self.lineEdit_2.text())
        self.nbyte = self.lineEdit_3.text()
        socket.connect((self.IP, self.port))
        
        while (self.comm_stop==0):
            QtWidgets.QApplication.processEvents()
            data = socket.recv(4096)
            time.sleep(1)
            self.hex_data = binascii.hexlify(data).decode('utf-8')
# =============================================================================
#             self.show_conn_view
# =============================================================================
            with open(r'C:\Users\SSIL_B104_1\Desktop\자료 수신 장치\LUSEM_GUI_TEST\GUI_TEST_5(20230724_처음부터_천천히)\다시 도전해보자\test1','w') as f:
                f.write(self.hex_data)
                f.write('\n')
            print(len(self.hex_data))
            # parsing
            self.sci, self.noi, self.soh, self.dum = self.datpar(self.hex_data)
            
# =============================================================================
#             # met setting
#             sci_met = self.sci[7] + self.sci[8] + self.sci[9] + self.sci[10] # LSP mission elapsed time, total seconds from 20010101T09:00:00
#             soh_met = self.sci[7] + self.sci[8] + self.sci[9] + self.sci[10] # LSP mission elapsed time, total seconds from 20010101T09:00:00
#             noi_met = self.noi[7] + self.noi[8] + self.noi[9] + self.noi[10] # LSP mission elapsed time, total seconds from 20010101T09:00:00
#             
#             # time setting
#             self.time_sci, self.time_sci_iso = self.time_cal(sci_met)
#             self.time_soh, self.time_soh_iso = self.time_cal(soh_met)
#             self.time_noi, self.time_noi_iso = self.time_cal(noi_met)
#             
#             self.pn_sci = len(self.sci.iloc[:,0]) # packet number of sci data
#             self.pn_soh = len(self.soh.iloc[:,0]) # packet number of soh data
#             self.pn_noi = len(self.noi.iloc[:,0]) # packet number of noi data
#             
#             self.start_time = self.time_sci[0]
#             self.end_time = self.time_sci[-1]
#             self.st_str = self.start_time.strftime('%Y-%m-%d %H:%M:%S')
#             self.et_str = self.end_time.strftime('%Y-%m-%d %H:%M:%S')
#             self.t_delta = str(self.pn_sci)
# =============================================================================
            
# =============================================================================
#             self.soh_parsed(self.soh)
#             self.science_data_seperation()
#             self.noise_data_seperation()
#             self.soh_header()
#             self.soh_plot()
#             self.science_plot()
#             
#             self.sci_fig.clear()
#             self.canvas1.draw()
# =============================================================================
            
# =============================================================================
#             print('Time conversion: complete', dt.now().replace(microsecond=0))
#             print('hex_data :', len(data))
# =============================================================================

            
        socket.close()
    
# =============================================================================
#     #%% show connect view
#     def show_conn_view(self):
#         self.listView.currentIndex(len(self.hex_data))
# =============================================================================
    #%% datpar
    def datpar(self,data):
         sci = []
         noi = []
         soh = []
         dum = []
         
         while True:
             bytedata = data[:6]
             if not bytedata:
                 break
             if bytedata == 'a82900':
                 bytedata = data[6:8]
                 if bytedata == 'c3':
                     bytedata = data[8:10]
                     if bytedata == '00':
                         bytedata = data[10:12]
                         if bytedata == '26':
                             soh.append("a5\t")
                             bytedata = data[12:164].upper()
                             for i in range(76):
                                 soh.append(bytedata[2*i:2*i+2].upper()+"\t")
                             soh.append("55\tde\tad\tbf\t5a\n")
                         elif bytedata == '5a':
                             noi.append("a5\t")
                             bytedata = data[12:372]
                             for i in range(180):
                                 noi.append(bytedata[2*i:2*i+2].upper()+'\t')
                             noi.append("55\tde\tad\tbf\t5a\n")
                         elif bytedata == '8a':
                             bytedata = data[12:24]
                             if bytedata[-4:] == "010d":
                                 print('256')
                                 sci.append("a5\t")
                                 for i in range(6):
                                     sci.append(bytedata[2 * i:2 * i + 2].upper() + '\t')
                                 bytedata = data[24:564]
                                 for i in range((256+8+6) ):
                                     sci.append(bytedata[2*i:2*i+2].upper()+'\t')
                                 sci.append("55\tde\tad\tbf\t5a\n")
    
                     elif bytedata == '01':
                         bytedata = data[10:12]
                         if bytedata == '0a':
                             bytedata = data[12:24]
                             if bytedata[-4:] == "020d":
                                 print('512')
                                 sci.append("a5\t")
                                 for i in range(6):
                                     sci.append(bytedata[2 * i:2 * i + 2].upper() + '\t')
                                 bytedata = data[24:1076]
                                 for i in range((512+8+6)):
                                     sci.append(bytedata[2 * i:2 * i + 2].upper() + '\t')
                                 sci.append("55\tde\tad\tbf\t5a\n")
    
                     elif bytedata == '02':
                         bytedata = data[10:12]
                         if bytedata == '0a':
                             print('1024')
                             sci.append("a5\t")
                             bytedata = data[12:2100]
                             for i in range(1024+20):
                                 sci.append(bytedata[2*i:2*i+2].upper()+'\t')
                             sci.append("55\tde\tad\tbf\t5a\n")
    
                     elif bytedata == '04':
                         bytedata = data[10:12]
                         if bytedata == '0c':
                            dum.append("a5\t")
                            bytedata = data[12:4156]
                            for i in range(2072):
                                dum.append(bytedata[2*i:2*i+2].upper()+'\t')
                            dum.append("55\tde\tad\tbf\t5a\n")
    
                 elif bytedata == 'c1':
                     bytedata = data[8:10]
                     if bytedata == '00':
                         bytedata = data[10:12]
                         if bytedata == '0c':
                             bytedata = data[12:60]
                             
         return sci, noi, soh, dum
    
    
    #%% fitting function
    def fit_gaussian(self, x, a, b, c):
        return (a / (b * np.sqrt(2 * np.pi))) * np.exp(-(x-c)**2/(2*b**2))

    def fit_sh(self, x, a, b, c): # Steinhart-Hart equation
        return 1 / (a + b * np.log(x) + c * ((np.log(x))**3))
    
    #%% time cal
    def time_cal(self, met):
        time_iso = []
        packet_num = len(met)
        for i in np.arange(packet_num):
            dt0 = int(met.iloc[i], 16)
            dt1 = dt.datetime(2001,1,1,9) + dt.timedelta(seconds=(dt0))
            time_iso.append(dt1.isoformat(timespec='seconds'))
        time_ut = pd.to_datetime(time_iso)
        time_iso = pd.DataFrame(time_iso, columns=['Time'])
        
        return time_ut, time_iso    
    
    #%% hex_decimal
    def signhex2dec(self):
        dlen = len(self.data)
        ddec = []
        for i in np.arange(dlen):
            data0 = bin(int(self.data[i], 16))[2:].zfill(16)
            msb0 = data0[0]
            data1 = data0[1:]
            if msb0 == '0':
                ddec.append(int(data1,2))
            elif msb0 == '1':
                ddec.append(-2**15 + int(data1,2))
            else:
                pass
        return np.array(ddec)
    
    #%% func_dropd
    def func_dropd(self,data):
       # drop_duplicates
        data_len = len(data)
        data_range = np.arange(data_len)
        data_shift = data.shift()
        index_min, index_max = [], []
        for i in data_range:
            dx1 = data[i]
            dx2 = data_shift[i]
            if dx1 != dx2:
                index_min.append(i)
                if i == 0:
                    index_max.append(data_len-1)
                else:
                    index_max.append(data_range[i-1])
        data_id = data[index_min]
        data_id = list(data_id)
        index_max.sort()
        return data_id, index_min, index_max
    
    #%% heder_creation
    def header_creation(self, pktnum):
       
        self.data_header = pd.DataFrame(columns=['Packet Version Number', 'Packet Type', 'Secondary Header', 'APID', 'Packet Sequence Flag', 'Packet Sequence Count', 'Packet Data Length', 'Mission Elapsed Time','Science Mode','Extension', 'Compression', 'MapID', 'Packet Mode', 'Reserved Length', 'SCICOM', 'CRC'])
        
        h0 = (self.data.iloc[:, 1] + self.data.iloc[:, 2]).apply(int, base=16).apply(bin).str[2:].str.zfill(16)
        self.data_header.loc[:, 'Packet Version Number'] = '0b' + h0.str[:3]
        self.data_header.loc[:, 'Packet Type'] = '0b' + h0.str[3:4]
        self.data_header.loc[:, 'Secondary Header'] = '0b' + h0.str[4:5]
        self.data_header.loc[:, 'APID'] = h0.str[5:].apply(int, base=2).apply(hex)
        
        h1 = (self.data.iloc[:, 3] + self.data.iloc[:, 4]).apply(int, base=16).apply(bin).str[2:].str.zfill(16)
        self.data_header.loc[:, 'Packet Sequence Flag'] = '0b' + h1.str[:2]
        self.data_header.loc[:, 'Packet Sequence Count'] = h1.str[2:].apply(int, base=2).apply(hex)
        
        h2 = self.data.iloc[:, 5] + self.data.iloc[:, 6]
        self.data_header.loc[:, 'Packet Data Length'] = '0x' + h2
        
        h3 = self.data.iloc[:, 7] + self.data.iloc[:, 8] + self.data.iloc[:, 9] + self.data.iloc[:, 10] + self.data.iloc[:, 11] + self.data.iloc[:, 12]
        self.data_header.loc[:, 'Mission Elapsed Time'] = '0x' + h3
        
        h4 = '0x' + self.data.iloc[:, 13]
        self.data_header.loc[:, 'Science Mode'] = h4
        
        h4a = (self.data.iloc[:, 13]).apply(int, base=16).apply(bin).str[2:].str.zfill(8)
        self.data_header.loc[:, 'Extension'] = (h4a.str[1] == '1')
        self.data_header.loc[:, 'Compression'] = (h4a.str[0] == '1')
        
        h5 = '0x' + self.data.iloc[:, 14]
        self.data_header.loc[:, 'MapID'] = h5
        
        h6 = '0x' + self.data.iloc[:, 15]
        self.data_header.loc[:, 'Packet Mode'] = h6
        
        h7 = '0x' +self. data.iloc[:, 16] + self.data.iloc[:, 17]
        self.data_header.loc[:, 'Reserved Length'] = h7
        
        h8 = '0x' + self.data.iloc[:, 18]
        self.data_header.loc[:, 'SCICOM'] = h8
        
        h9 = '0x' + self.data.iloc[:, 19] + self.data.iloc[:, 20]
        self.data_header.loc[:, 'CRC'] = h9
        
        return self.data_header
    
    #%% soh update
    def soh_update(self, frame):
        self.ax_soh1.lines[0].set_data(self.time_soh[:frame], self.soh_data.loc[:frame, 'Bias Cur Monitor'])
        self.ax_soh2.lines[0].set_data(self.time_soh[:frame], self.soh_data.loc[:frame, 'Bias Voltage Monitor'])
        self.ax_soh3.lines[0].set_data(self.time_soh[:frame], self.soh_data.loc[:frame, '-5VA'])
        self.ax_soh4.lines[0].set_data(self.time_soh[:frame], self.soh_data.loc[:frame, '+5VA'])
        self.ax_soh5.lines[0].set_data(self.time_soh[:frame], self.soh_data.loc[:frame, '+5VD'])
        self.ax_soh6.lines[0].set_data(self.time_soh[:frame], self.soh_data.loc[:frame, 'FPGA Thermistor'])
        self.ax_soh7.lines[0].set_data(self.time_soh[:frame], self.soh_data.loc[:frame, '+2.5VD_(1)'])
        self.ax_soh7.lines[1].set_data(self.time_soh[:frame], self.soh_data.loc[:frame, '+2.5VD_(2)'])
    
    #%% science & noise update
    def sci_update(self,frame):
        self.plt1.set_array(self.sci_b.T[:frame].ravel())
        self.plt2.set_array(self.sci_a.T[:frame].ravel())
        self.plt3.set_array(self.noi_cal.T[:frame].ravel())
        # Return the plots to be updated
        return self.plt1, self.plt2, self.plt3
    
    #%% soh parsing
    def soh_parsed(self,soh):
        soh_data = pd.DataFrame(columns=['Bias Cur Monitor', 'Bias Voltage Monitor', '-5VA', '+5VA', '+5VD', 'FPGA Thermistor', '+2.5VD_(1)', '+2.5VD_(2)', 'FPGA Revision Number', 'Valid Command Counter', 'Invalid Command Counter', 'Board ID', 'Test Pulse Enable', 'Test Pulse FTUO Pattern', 'Baseline Restoration Mode', 'Detector Enable', 'Noise Measurement Enable', 'Noise Data Resolution', 'Noise Period', 'Memory Fill Address', 'LUT Checksum', 'PPS Counter', 'Event Count Number', 'Count Rate_AO', 'Count Rate_AU', 'Count Rate_AT', 'Count Rate_AF', 'Count Rate_BO', 'Count Rate_BU', 'Count Rate_BT', 'Count Rate_BF', 'Bus Timeout Count_Memory Fill Process', 'Bus Timeout Count_Telemetry Process', 'Bus Timeout Count_Event Process', 'Bus Timeout Count_Noise Measurement', 'Detector Timeout Error Count', 'Valid without Peak Anomaly Count'])
         
        soh_data.loc[:, 'Bias Cur Monitor'] = (self.signhex2dec(soh.iloc[:,21] + soh.iloc[:,22]) * 2.5 / 32768)
        soh_data.loc[:, 'Bias Voltage Monitor'] = (self.signhex2dec(soh.iloc[:,23] + soh.iloc[:,24]) * 2.5 / 32768)
        soh_data.loc[:, '-5VA'] = (self.signhex2dec(soh.iloc[:,25] + soh.iloc[:,26]) * 2.5 / 32768 ) * (16.65 / 6.65)
        soh_data.loc[:, '+5VA'] = (self.signhex2dec(soh.iloc[:,27] + soh.iloc[:,28]) * 2.5 / 32768 ) * (16.65 / 6.65)
        soh_data.loc[:, '+5VD'] = (self.signhex2dec(soh.iloc[:,29] + soh.iloc[:,30]) * 2.5 / 32768 ) * (16.65 / 6.65)
         
        Ther1 = (self.signhex2dec(soh.iloc[:,31] + soh.iloc[:,32]) * 2.5 / 32768)
        Ther1_res = 49.9 * (1/(2.5/Ther1 -1))
         
         # LSP Thermistor: 311P18-07S7R6 (NTC thermistor)
        tt_ref = np.array([-55,-54,-53,-52,-51,-50,-49,-48,-47,-46,-45,-44,-43,-42,-41,-40,-39,-38,-37,-36,-35,-34,-33,-32,-31,
                           -30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,
                           -5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
                           30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,
                           62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90])
        tr_ref = np.array([607.8,569.6,534.1,501,470.1,441.3,414.5,389.4,366,344.1,323.7,304.6,286.7,270,254.4,239.8,226,213.2,201.1,
                   189.8,179.2,169.3,160,151.2,143,135.2,127.9,121.1,114.6,108.6,102.9,97.49,92.43,87.66,83.16,78.91,74.91,71.13,
                   67.57,64.2,61.02,58.01,55.17,52.48,49.94,47.54,45.27,43.11,41.07,39.14,37.31,35.57,33.93,32.37,30.89,
                   29.49,28.15,26.89,25.69,24.55,23.46,22.43,21.45,20.52,19.63,18.79,17.98,17.22,16.49,15.79,15.13,14.5,
                   13.9,13.33,12.79,12.26,11.77,11.29,10.84,10.41,10,9.605,9.227,8.867,8.523,8.194,7.88,7.579,7.291,7.016,
                   6.752,6.5,6.258,6.026,5.805,5.592,5.389,5.193,5.006,4.827,4.655,4.489,4.331,4.179,4.033,3.893,3.758,3.629,
                   3.504,3.385,3.27,3.16,3.054,2.952,2.854,2.76,2.669,2.582,2.497,2.417,2.339,2.264,2.191,2.122,2.055,1.99,
                   1.928,1.868,1.81,1.754,1.7,1.648,1.598,1.549,1.503,1.458,1.414,1.372,1.332,1.293,1.255,1.218,1.183,1.149,1.116,1.084])
         
        popt_t, pcov_t = curve_fit(self.fit_sh, tr_ref, tt_ref+273.15)
        perr_t = np.sqrt(np.diag(pcov_t))
        tt_fit = self.fit_sh(tr_ref, *popt_t) - 273.15
         
        Ther1_temp = self.fit_sh(Ther1_res, *popt_t) - 273.15
        soh_data.loc[:, 'FPGA Thermistor'] = Ther1_temp
         
        soh_data.loc[:, '+2.5VD_(1)'] = (self.signhex2dec(soh.iloc[:,33] + soh.iloc[:,34]) * 2.5 / 32768)
        soh_data.loc[:, '+2.5VD_(2)'] = (self.signhex2dec(soh.iloc[:,35] + soh.iloc[:,36]) * 2.5 / 32768)
         
        soh_data.loc[:, 'FPGA Revision Number'] = '0x' + soh.iloc[:,38]
        soh_data.loc[:, 'Valid Command Counter'] = '0x' + soh.iloc[:,39]
        soh_data.loc[:, 'Invalid Command Counter'] = '0x' + soh.iloc[:,40]
         
        for i in np.arange(len(soh.iloc[:,41])):
            b0 = bin(int(soh.iloc[i,41], base=16))[2:].zfill(8)
            soh_data.loc[i,'Board ID'] = '0b' + b0[2:4]
            soh_data.loc[i,'Test Pulse Enable'] = '0b' + b0[7]
         
            soh_data.loc[:, 'Test Pulse FTUO Pattern'] = '0b' + soh.iloc[:,42].apply(lambda x: bin(int(x, base=16))[2:].zfill(8))
            soh_data.loc[:, 'Baseline Restoration Mode'] = '0x' + soh.iloc[:,43]
            soh_data.loc[:, 'Detector Enable'] = '0b' + soh.iloc[:,44].apply(lambda x: bin(int(x, base=16))[2:].zfill(8))
         
        for i in np.arange(len(soh.iloc[:,45])):
            b0 = bin(int(soh.iloc[i,45], base=16))[2:].zfill(8)
            soh_data.loc[i,'Noise Measurement Enable'] = '0b' + b0[4]
            soh_data.loc[i,'Noise Data Resolution'] = '0b' + b0[5:]
         
        soh_data.loc[:, 'Noise Period'] = '0x' + soh.iloc[:,46]
        soh_data.loc[:, 'Memory Fill Address'] = '0x' + soh.iloc[:,47] + soh.iloc[:,48]
        soh_data.loc[:, 'LUT Checksum'] = '0x' + soh.iloc[:,49]
        soh_data.loc[:, 'PPS Counter'] = '0x' + soh.iloc[:,50]
        soh_data.loc[:, 'Event Count Number'] = '0x' + soh.iloc[:,51] + soh.iloc[:,52]
        soh_hkprate0 = soh.iloc[:, 53:53+16]
        soh_hkprate = soh_hkprate0.iloc[:,::2].T.reset_index(drop=True).T + soh_hkprate0.iloc[:,1::2].T.reset_index(drop=True).T
        soh_hkprate = soh_hkprate.fillna(0).apply(lambda x: x.astype(str).map(lambda x: int(x, base=16)))
         
        soh_data.loc[:, 'Count Rate_AO'] = soh_hkprate.iloc[:,0]
        soh_data.loc[:, 'Count Rate_AU'] = soh_hkprate.iloc[:,1]
        soh_data.loc[:, 'Count Rate_AT'] = soh_hkprate.iloc[:,2]
        soh_data.loc[:, 'Count Rate_AF'] = soh_hkprate.iloc[:,3]
        soh_data.loc[:, 'Count Rate_BO'] = soh_hkprate.iloc[:,4]
        soh_data.loc[:, 'Count Rate_BU'] = soh_hkprate.iloc[:,5]
        soh_data.loc[:, 'Count Rate_BT'] = soh_hkprate.iloc[:,6]
        soh_data.loc[:, 'Count Rate_BF'] = soh_hkprate.iloc[:,7]
         
        for i in np.arange(len(soh.iloc[:,69])):
            b0 = bin(int(soh.iloc[i,69], base=16))[2:].zfill(8)
            soh_data.loc[i,'Bus Timeout Count_Memory Fill Process'] = '0b' + b0[:4]
            soh_data.loc[i,'Bus Timeout Count_Telemetry Process'] = '0b' + b0[4:]
         
        for i in np.arange(len(soh.iloc[:,70])):
            b0 = bin(int(soh.iloc[i,70], base=16))[2:].zfill(8)
            soh_data.loc[i,'Bus Timeout Count_Event Process'] = '0b' + b0[:4]
            soh_data.loc[i,'Bus Timeout Count_Noise Measurement'] = '0b' + b0[4:]
         
        soh_data.loc[:, 'Detector Timeout Error Count'] = '0x' + soh.iloc[:,71]
        soh_data.loc[:, 'Valid without Peak Anomaly Count'] = '0x' + soh.iloc[:,72]
        return soh_data
    
    #%% science data seperation
    
    def science_data_seperation(self):
        self.sci_header = self.header_creation(self.sci, self.pn_sci)
        sci_mapid = self.sci[14] # MAP ID
        sci_scpktif = self.sci[13] # compression type
        print('Science header: complete', dt.datetime.now().replace(microsecond=0))
        self.mapid, self.mapid_min, self.mapid_max = self.func_dropd(sci_mapid)
        self.ct_list = list(sci_scpktif.drop_duplicates())
        self.comp_type, self.comp_min, self.comp_max = self.func_dropd(sci_scpktif) # compression type, drop_duplicates
        sci_data = self.sci.iloc[:, 21:].T.reset_index(drop=True).T
        
        self.fig_num = 0
        for i in np.arange(len(self.comp_type)):
            ct0 = self.comp_type[i]
            ct0_min, ct0_max = self.comp_min[i], self.comp_max[i] + 1
            sci0 = sci_data.iloc[ct0_min:ct0_max, :]
            sci0_len = len(sci0.iloc[:, 0])

            if ct0 == '00':
                sci0 = sci0.iloc[:, :512]
                sci0 = sci0.iloc[:, ::2].T.reset_index(drop=True).T + sci0.iloc[:, 1::2].T.reset_index(drop=True).T
                sci0 = sci0.fillna(0).apply(lambda x: x.astype(str).map(lambda x: int(x, base=16)))
                sci0a = sci0.iloc[:, :128].T.reset_index(drop=True).T
                sci0b = sci0.iloc[:, 128:].T.reset_index(drop=True).T
                self.sci_a = pd.concat([self.sci_a, sci0a])
                self.sci_b = pd.concat([self.sci_b, sci0b])

                sci_map0 = sci_mapid[sci0.index].reset_index(drop=True)
                mapid0, map0_min, map0_max = self.func_dropd(sci_map0)
# =============================================================================
#                 time0 = self.time_sci[sci0.index]
#                 bar_a0 = sci0a.copy().reset_index(drop=True)
#                 bar_b0 = sci0b.copy().reset_index(drop=True)
# 
#                 for j in np.arange(len(mapid0)):
#                     if mapid0[j] == '00':
#                         pass
#                     else:
#                         bar_a = bar_a0.loc[map0_min[j]:map0_max[j] + 1, :]
#                         bar_b = bar_b0.loc[map0_min[j]:map0_max[j] + 1, :]
#                         time1 = time0[map0_min[j]:map0_max[j] + 1]
#                         bar_len = len(time1)
#                         if bar_len < 60:
#                             pass
#                         else:
#                             self.get_bar(bar_a, bar_b, time1, ct0, mapid0[j], self.fig_num)
#                             self.fig_num += 1
# =============================================================================

            elif ct0 == 'A0':
                sci0 = sci0.iloc[:, :256]
                sci0 = sci0.fillna(0).apply(lambda x: x.astype(str).map(lambda x: int(x, base=16)))
                sci0a = sci0.iloc[:, :128].T.reset_index(drop=True).T
                sci0b = sci0.iloc[:, 128:].T.reset_index(drop=True).T
                sci0a = sci0a.apply(lambda x: x.astype(int).map(lambda x: self.logmap[x]))
                sci0b = sci0b.apply(lambda x: x.astype(int).map(lambda x: self.logmap[x]))
                self.sci_a = pd.concat([self.sci_a, sci0a])
                self.sci_b = pd.concat([self.sci_b, sci0b])

                sci_map0 = sci_mapid[sci0.index].reset_index(drop=True)
                mapid0, map0_min, map0_max = self.func_dropd(sci_map0)
# =============================================================================
#                 time0 = self.time_sci[sci0.index]
#                 bar_a0 = sci0a.copy().reset_index(drop=True)
#                 bar_b0 = sci0b.copy().reset_index(drop=True)
# 
#                 for j in np.arange(len(mapid0)):
#                     if mapid0[j] == '00':
#                         pass
#                     else:
#                         bar_a = bar_a0.loc[map0_min[j]:map0_max[j] + 1, :]
#                         bar_b = bar_b0.loc[map0_min[j]:map0_max[j] + 1, :]
#                         time1 = time0[map0_min[j]:map0_max[j] + 1]
#                         bar_len = len(time1)
#                         if bar_len < 60:
#                             pass
#                         else:
#                             self.get_bar(bar_a, bar_b, time1, ct0, mapid0[j], self.fig_num)
#                             self.fig_num += 1
# =============================================================================

            elif ct0 == '40':
                sci0 = sci0.iloc[:, ::2].T.reset_index(drop=True).T + sci0.iloc[:, 1::2].T.reset_index(drop=True).T
                sci0 = sci0.fillna(0).apply(lambda x: x.astype(str).map(lambda x: int(x, base=16)))
                sci0a = sci0.iloc[:, :256].T.reset_index(drop=True).T
                sci0b = sci0.iloc[:, 256:].T.reset_index(drop=True).T
                self.sci_a = pd.concat([self.sci_a, sci0a])
                self.sci_b = pd.concat([self.sci_b, sci0b])

                sci_map0 = sci_mapid[sci0.index].reset_index(drop=True)
                mapid0, map0_min, map0_max = self.func_dropd(sci_map0)
# =============================================================================
#                 time0 = self.time_sci[sci0.index]
#                 bar_a0 = sci0a.copy().reset_index(drop=True)
#                 bar_b0 = sci0b.copy().reset_index(drop=True)
# 
#                 for j in np.arange(len(mapid0)):
#                     if mapid0[j] == '00':
#                         pass
#                     else:
#                         bar_a = bar_a0.loc[map0_min[j]:map0_max[j] + 1, :]
#                         bar_b = bar_b0.loc[map0_min[j]:map0_max[j] + 1, :]
#                         time1 = time0[map0_min[j]:map0_max[j] + 1]
#                         bar_len = len(time1)
#                         if bar_len < 60:
#                             pass
#                         else:
#                             self.get_bar(bar_a, bar_b, time1, ct0, mapid0[j], self.fig_num)
#                             self.fig_num += 1
# =============================================================================

            elif ct0 == 'E0':
                sci0 = sci0.iloc[:, :512]
                sci0 = sci0.fillna(0).apply(lambda x: x.astype(str).map(lambda x: int(x, base=16)))
                sci0a = sci0.iloc[:, :256].T.reset_index(drop=True).T
                sci0b = sci0.iloc[:, 256:].T.reset_index(drop=True).T
                sci0a = sci0a.apply(lambda x: x.astype(int).map(lambda x: self.logmap[x]))
                sci0b = sci0b.apply(lambda x: x.astype(int).map(lambda x: self.logmap[x]))
                self.sci_a = pd.concat([self.sci_a, sci0a])
                self.sci_b = pd.concat([self.sci_b, sci0b])

                sci_map0 = sci_mapid[sci0.index].reset_index(drop=True)
                mapid0, map0_min, map0_max = self.func_dropd(sci_map0)
# =============================================================================
#                 time0 = self.time_sci[sci0.index]
#                 bar_a0 = sci0a.copy().reset_index(drop=True)
#                 bar_b0 = sci0b.copy().reset_index(drop=True)
# 
#                 for j in np.arange(len(mapid0)):
#                     if mapid0[j] == '00':
#                         pass
#                     else:
#                         bar_a = bar_a0.loc[map0_min[j]:map0_max[j] + 1, :]
#                         bar_b = bar_b0.loc[map0_min[j]:map0_max[j] + 1, :]
#                         time1 = time0[map0_min[j]:map0_max[j] + 1]
#                         bar_len = len(time1)
#                         if bar_len < 60:
#                             pass
#                         else:
#                             self.get_bar(bar_a, bar_b, time1, ct0, mapid0[j], self.fig_num)
#                             self.fig_num += 1
# =============================================================================
            else:
                pass
        self.sci_a = self.sci_a.sort_index()
        self.sci_b = self.sci_b.sort_index()
        sci_bin = len(self.sci_a.iloc[0, :])

        binname_a, binname_b = [], []
        for i in np.arange(sci_bin):
            binname_a.append('A_Bin_' + str(i))
            binname_b.append('B_Bin_' + str(i))

        self.sci_a.columns = binname_a
        self.sci_b.columns = binname_b

        # shade cal.
        shade_min, shade_max = [], []
        for i in np.arange(self.pn_sci):
            sci_mode = sci_scpktif.iloc[i]
            if sci_mode == '00' or sci_mode == 'A0':
                shade_min.append(128)
                shade_max.append(256)
            elif sci_mode == '40' or sci_mode == 'E0':
                shade_min.append(256)
                shade_max.append(256)
            else:
                pass
        self.shade_min = np.array(shade_min)
        self.shade_max = np.array(shade_max)
    
    #%% Noise data
    def noise_data_seperation(self):
        self.noi_header = self.header_creation(self.noi, self.pn_noi)

        noi_data0 = self.noi.iloc[:, 21:21+160].T.reset_index(drop=True).T
        noi_data = noi_data0.iloc[:,::2].T.reset_index(drop=True).T + noi_data0.iloc[:,1::2].T.reset_index(drop=True).T
        noi_data = noi_data.fillna(0).apply(lambda x: x.astype(str).map(lambda x: int(x, base=16)))

        self.noi_cal = noi_data.diff()

        for i in np.arange(self.pn_noi):
            for j in np.arange(len(noi_data.iloc[0,:])):
                dn0 = self.noi_cal.iloc[i,j]
                if dn0 >= 0:
                    pass
                elif dn0 < 0:
                    dn1 = 65535 + dn0
                    self.noi_cal.iloc[i,j] = dn1
                else:
                    pass
        self.noi_num = len(self.noi_cal.iloc[0,:])

        noi_col = []
        for i in ['A', 'B']:
            for j in ['O', 'U', 'T', 'F']:
                for k in np.arange(10):
                    noi_col.append(i+j+'_Ch '+str(k))

        self.noi_cal.columns = noi_col
    
    #%% SOH data
    def soh_data(self):
        self.soh_header = self.header_creation(self.soh, self.pn_soh)
        self.soh_data = self.soh_parsed(self.soh)
    
    #%% soh_plot setting & plot
    def soh_plot(self):
        QtWidgets.QApplication.processEvents()
        xl = 16
        yl = 16
         # Tick label size
        xtl = 14
        ytl = 14
        ytl2 = 14
         # Tck Mark Length and Width
        w1= 1.00
        l1 = 10.0
        w2 = 0.75
        l2= 5.0  
         # Tick mark interval
        major_locator = mdates.AutoDateLocator()
        minor_locator = mdates.AutoDateLocator(maxticks=30)
        xformatter = mdates.DateFormatter('%b-%d\n%H:%M:%S')
        xformatter1 = mdates.DateFormatter('%M')
        mpl.style.use('classic')
        plt.rcParams['font.family'] = 'Times New Roman'
        params = {'mathtext.default': 'regular' }          
        plt.rcParams.update(params)
        plt.ioff()
        
        self.soh_fig = plt.figure(num=1, figsize=(16,12))
        gs = gridspec.GridSpec(7, 1, height_ratios=(1,1,1,1,1,1,1), hspace=0.2)
        
        self.ax_soh1 = self.soh_fig.add_subplot(gs[0])
        self.ax_soh2 = self.soh_fig.add_subplot(gs[1])
        self.ax_soh3 = self.soh_fig.add_subplot(gs[2])
        self.ax_soh4 = self.soh_fig.add_subplot(gs[3])
        self.ax_soh5 = self.soh_fig.add_subplot(gs[4])
        self.ax_soh6 = self.soh_fig.add_subplot(gs[5])
        self.ax_soh7 = self.soh_fig.add_subplot(gs[6])
        
        self.ax_soh1.set_title('Test time: '+self.st_str+' - '+self.et_str+' ('+self.t_delta+' s)', loc='right')
        self.ax_soh1.grid(True, which="both")
        self.ax_soh1.set_xlim([self.start_time, self.end_time])
        self.ax_soh1.xaxis.set_major_locator(major_locator)
        self.ax_soh1.xaxis.set_minor_locator(minor_locator)
        self.ax_soh1.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_soh1.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_soh1.get_xticklabels(), visible=False)

        self.ax_soh2.grid(True, which="both")
        self.ax_soh2.set_xlim([self.start_time, self.end_time])
        self.ax_soh2.xaxis.set_major_locator(major_locator)
        self.ax_soh2.xaxis.set_minor_locator(minor_locator)
        self.ax_soh2.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_soh2.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_soh2.get_xticklabels(), visible=False)

        self.ax_soh3.grid(True, which="both")
        self.ax_soh3.set_xlim([self.start_time, self.end_time])
        self.ax_soh3.xaxis.set_major_locator(major_locator)
        self.ax_soh3.xaxis.set_minor_locator(minor_locator)
        self.ax_soh3.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_soh3.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_soh3.get_xticklabels(), visible=False)

        self.ax_soh4.grid(True, which="both")
        self.ax_soh4.set_xlim([self.start_time, self.end_time])
        self.ax_soh4.xaxis.set_major_locator(major_locator)
        self.ax_soh4.xaxis.set_minor_locator(minor_locator)
        self.ax_soh4.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_soh4.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_soh4.get_xticklabels(), visible=False)

        self.ax_soh5.grid(True, which="both")
        self.ax_soh5.set_xlim([self.start_time, self.end_time])
        self.ax_soh5.xaxis.set_major_locator(major_locator)
        self.ax_soh5.xaxis.set_minor_locator(minor_locator)
        self.ax_soh5.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_soh5.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_soh5.get_xticklabels(), visible=False)

        self.ax_soh6.grid(True, which="both")
        self.ax_soh6.set_xlim([self.start_time, self.end_time])
        self.ax_soh6.xaxis.set_major_locator(major_locator)
        self.ax_soh6.xaxis.set_minor_locator(minor_locator)
        self.ax_soh6.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_soh6.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_soh6.get_xticklabels(), visible=False)

        self.ax_soh7.legend(fontsize=12, ncol=2, framealpha=0.5)
        self.ax_soh7.set_xlim([self.start_time, self.end_time])
        self.ax_soh7.set_ylabel('+2.5VD', size=yl, fontweight='bold', labelpad=10)
        self.ax_soh7.set_xlabel('Time, KST', size=xl, fontweight='bold')
        self.ax_soh7.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_soh7.tick_params(which='minor', labelsize=12, width=w2, length=l2, direction='in')
        self.ax_soh7.grid(True, which="both")
        self.ax_soh7.xaxis.set_major_locator(major_locator)
        self.ax_soh7.xaxis.set_minor_locator(minor_locator)
        self.ax_soh7.xaxis.set_major_formatter(xformatter)
        self.ax_soh7.xaxis.set_tick_params(which='major', pad=10)
        plt.setp(self.ax_soh7.get_xticklabels(), visible=True)
        
        #plt.tight_layout()
        self.soh_fig.align_labels()
# =============================================================================
#         self.ani_soh = FuncAnimation(self.soh_fig, self.soh_update, frames=len(self.soh_data), blit=True)
#         self.ani_soh.show()
# =============================================================================
        print('soh_power-temp plot: complete', dt.datetime.now().replace(microsecond=0))

        soh_tppa = self.soh_data.loc[:,'Test Pulse FTUO Pattern'].str.slice(2,6)
        soh_tppa_f = pd.to_numeric(soh_tppa.str.slice(0,1))
        soh_tppa_t = pd.to_numeric(soh_tppa.str.slice(1,2))
        soh_tppa_u = pd.to_numeric(soh_tppa.str.slice(2,3))
        soh_tppa_o = pd.to_numeric(soh_tppa.str.slice(3,4))
        soh_tppa = pd.concat([soh_tppa_f, soh_tppa_t, soh_tppa_u, soh_tppa_o], axis=1)
        self.soh_rate = self.soh_data.loc[:,'Count Rate_AO':'Count Rate_BF']
        
    #%% science plot setting & plot
    def science_plot(self):
        QtWidgets.QApplication.processEvents()
        xl = 16
        yl = 16
        # Tick label size
        xtl = 12
        ytl = 12
        # Tck Mark Length and Width
        w1= 1.00
        l1 = 10.0
        w2 = 0.75
        l2= 5.0  
        
        major_locator = mdates.AutoDateLocator()
        minor_locator = mdates.AutoDateLocator(maxticks=30)
        xformatter = mdates.DateFormatter('%b-%d\n%H:%M:%S')
        xformatter1 = mdates.DateFormatter('%M')
        mpl.style.use('classic')
        plt.rcParams['font.family'] = 'Times New Roman'
        params = {'mathtext.default': 'regular' }          
        plt.rcParams.update(params)

        plt.ioff()

        self.sci_fig = plt.figure(num=3, figsize=(16,12))
        gs = gridspec.GridSpec(6, 1, height_ratios=(0.3,0.3,1,4,4,4), hspace=0.1) 

        # spectrogram axis
        ax_sci = self.sci_fig.add_subplot(gs[3:5])
        ax_sci.spines['top'].set_color('none')
        ax_sci.spines['bottom'].set_color('none')
        ax_sci.spines['left'].set_color('none')
        ax_sci.spines['right'].set_color('none')
        ax_sci.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)

        self.ax_sci1 = self.sci_fig.add_subplot(gs[0])
        self.ax_sci2 = self.sci_fig.add_subplot(gs[1])
        self.ax_sci3 = self.sci_fig.add_subplot(gs[2])
        self.ax_sci4 = self.sci_fig.add_subplot(gs[3])
        self.ax_sci5 = self.sci_fig.add_subplot(gs[4])
        self.ax_sci6 = self.sci_fig.add_subplot(gs[5])

        #fig.suptitle('LUSEM Plot Example', color='k',fontsize=40, fontweight='bold', y=0.95)    

        self.ax_sci1.set_title('Test time: '+self.st_str+' - '+self.et_str+' ('+self.t_delta+' s)', loc='right')

        for i in np.arange(len(self.mapid_min)):
            self.ax_sci1.axvspan(self.time_sci[self.mapid_min[i]], self.time_sci[self.mapid_max[i]], alpha=0.2, fc=np.random.rand(3,))
            m_delta0 = (self.time_sci[self.mapid_max[i]] - self.time_sci[self.mapid_min[i]]).seconds / 2
            m_delta1 = dt.timedelta(seconds = m_delta0)
            self.ax_sci1.text(self.time_sci[self.mapid_min[i]]+m_delta1, 0.5, self.mapid[i], weight='bold', ha='center', va='center')

        self.ax_sci1.set_xlim([self.start_time, self.end_time])    
        self.ax_sci1.tick_params(which='major', bottom=False, top=False, left=False, right=False)
        #ax1.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_sci1.get_xticklabels(),visible=False)    
        plt.setp(self.ax_sci1.get_yticklabels(),visible=False)    

        for i in np.arange(len(self.comp_min)):
            self.ax_sci2.axvspan(self.time_sci[self.comp_min[i]], self.time_sci[self.comp_max[i]], alpha=0.2, fc=np.random.rand(3,))
            m_delta0 = (self.time_sci[self.comp_max[i]] - self.time_sci[self.comp_min[i]]).seconds / 2
            m_delta1 = dt.timedelta(seconds = m_delta0)
            self.ax_sci2.text(self.time_sci[self.comp_min[i]]+m_delta1, 0.5, self.comp_type[i], weight='bold', ha='center', va='center')

        self.ax_sci2.set_xlim([self.start_time, self.end_time])    
        self.ax_sci2.tick_params(which='major', bottom=False, top=False, left=False, right=False)
        #ax1.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_sci2.get_xticklabels(),visible=False)    
        plt.setp(self.ax_sci2.get_yticklabels(),visible=False)    

        hkp_color = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple', 'tab:brown', 'tab:pink', 'tab:cyan']
        for i in np.arange(len(self.soh_rate.iloc[0,:])):
            if i < 4:
                self.ax_sci3.plot(self.time_soh, self.soh_rate.iloc[:,i], marker='+', markevery=20, ms=4, label=self.soh_rate.columns[i], color=hkp_color[i])
            elif i >= 4:
                self.ax_sci3.plot(self.time_soh, self.soh_rate.iloc[:,i], marker='x', markevery=20, ms=4, label=self.soh_rate.columns[i], color=hkp_color[i])
            else:
                pass
        self.ax_sci3.legend(fontsize=8, framealpha=0.5, bbox_to_anchor=(1.01, 1), loc='upper left', borderaxespad=0., ncol=2)
        self.ax_sci3.set_ylabel('HKP\nRATES', size=yl, fontweight='bold', labelpad=10)
        self.ax_sci3.set_yscale('log')
        self.ax_sci3.set_xlim([self.start_time, self.end_time])    
        self.ax_sci3.xaxis.set_major_locator(major_locator)
        self.ax_sci3.xaxis.set_minor_locator(minor_locator)
        self.ax_sci3.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_sci3.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_sci3.get_xticklabels(),visible=False)

        sci_bin = len(self.sci_a.iloc[0,:])
        cbar_min, cbar_max = 1, 1e3

        self.plt1 = self.ax_sci4.pcolormesh(self.time_sci, np.arange(sci_bin,sci_bin*2,1), self.sci_b.T, cmap='jet', norm=colors.LogNorm(vmin=cbar_min, vmax=cbar_max), shading='auto')
        self.ax_sci4.fill_between(self.time_sci, self.shade_max+256, self.shade_min+256, color='gray', alpha=0.1, step='mid', hatch='/', ec=None)
        box = ax_sci.get_position()
        axColor = plt.axes([box.x0 + box.width * 1.01, box.y0, 0.01, box.height])
        cbar1 = self.sci_fig.colorbar(self.plt1, cax=axColor, orientation="vertical")
        cbar1.ax.set_ylabel(ylabel='Counts', size=xl, weight='bold')
        cbar1.ax.tick_params(which='major', labelsize=xtl, direction='in', width=w1, length=l1)
        cbar1.ax.tick_params(which='minor', width=w2, length=l2, direction='in')
        self.ax_sci4.set_ylabel('SCI DATA\nTELESCOPE-B', size=yl, fontweight='bold', labelpad=10)
        self.ax_sci4.set_ylim([sci_bin,sci_bin*2])
        self.ax_sci4.set_xlim([self.start_time, self.end_time])
        self.ax_sci4.xaxis.set_major_locator(major_locator)
        self.ax_sci4.xaxis.set_minor_locator(minor_locator)
        self.ax_sci4.yaxis.set_major_locator(ticker.MultipleLocator(32))
        self.ax_sci4.yaxis.set_minor_locator(ticker.MultipleLocator(8))
        self.ax_sci4.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_sci4.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_sci4.get_xticklabels(),visible=False)

        self.plt2 = self.ax_sci5.pcolormesh(self.time_sci, np.arange(0,sci_bin,1), self.sci_a.T, cmap='jet', norm=colors.LogNorm(vmin=cbar_min, vmax=cbar_max), shading='auto')
        self.ax_sci5.fill_between(self.time_sci, self.shade_max, self.shade_min, color='gray', alpha=0.1, step='mid', hatch='/', ec=None)
        self.ax_sci5.set_ylabel('SCI DATA\nTELESCOPE-A', size=yl, fontweight='bold', labelpad=10)
        self.ax_sci5.set_ylim([0,sci_bin])
        self.ax_sci5.set_xlim([self.start_time, self.end_time])
        self.ax_sci5.xaxis.set_major_locator(major_locator)
        self.ax_sci5.xaxis.set_minor_locator(minor_locator)
        self.ax_sci5.yaxis.set_major_locator(ticker.MultipleLocator(32))
        self.ax_sci5.yaxis.set_minor_locator(ticker.MultipleLocator(8))
        self.ax_sci5.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_sci5.tick_params(which='minor', width=w2, length=l2, direction='in')
        plt.setp(self.ax_sci5.get_xticklabels(),visible=False)

        self.plt3 = self.ax_sci6.pcolormesh(self.time_noi, np.arange(0,80,1), self.noi_cal.T, cmap='jet', norm=colors.LogNorm(vmin=1, vmax=1e3), shading='auto')
        box = self.ax_sci6.get_position()
        axColor = plt.axes([box.x0 + box.width * 1.01, box.y0, 0.01, box.height])
        cbar1 = self.sci_fig.colorbar(self.plt3, cax=axColor, orientation="vertical")
        cbar1.ax.set_ylabel(ylabel='Counts', size=xl, weight='bold')
        cbar1.ax.tick_params(which='major', labelsize=xtl, direction='in', width=w1, length=l1)
        cbar1.ax.tick_params(which='minor', width=w2, length=l2, direction='in')
        self.ax_sci6.set_ylim([0,80])
        self.ax_sci6.set_xlim([self.start_time, self.end_time])
        self.ax_sci6.set_ylabel('NOISE DATA', size=yl, fontweight='bold', labelpad=10)
        self.ax_sci6.set_xlabel('Time, KST', size=xl, fontweight='bold')
        self.ax_sci6.tick_params(which='major', labelsize=ytl, width=w1, length=l1, direction='in')
        self.ax_sci6.tick_params(which='minor', labelsize=12, width=w2, length=l2, direction='in')
        #ax7.grid(True, which="both")
        self.ax_sci6.xaxis.set_major_locator(major_locator)
        self.ax_sci6.xaxis.set_minor_locator(minor_locator)
        self.ax_sci6.xaxis.set_major_formatter(xformatter)
        #ax7.xaxis.set_minor_formatter(xformatter1)
        self.ax_sci6.yaxis.set_major_locator(ticker.MultipleLocator(10))
        self.ax_sci6.yaxis.set_minor_locator(ticker.MultipleLocator(5))
        self.ax_sci6.xaxis.set_tick_params(which='major', pad=10)
        plt.setp(self.ax_sci6.get_xticklabels(),visible=True)

        #plt.tight_layout()
        #fig.align_ylabels([ax1,ax2,ax5,ax6,ax7])
        self.sci_fig.align_labels()
# =============================================================================
#         self.ani_sci = FuncAnimation(self.sci_fig, self.sci_update, frames=len(self.sci_b), blit=True)
#         self.ani_sci.show()
# =============================================================================
        print('sci_spectrogram plot: complete', dt.datetime.now().replace(microsecond=0))
    
    #%% button_evnet_disconnect
    # Disconnect button
    def button_event_disconn(self):
        self.comm_stop=1
    
    #%% save file name
    # save file name (write to)
    def button_event_write(self):
        self.filename = self.lineEdit_4.text()
    
    # save start
# =============================================================================
#     def button_event_save_start(self):
#         self.start_time = self.timeEdit.time()
#         self.start_dd = self.start_time.days()
#         self.start_hh = self.start_time.hours()
#         self.start_mm = self.start_time.minutes()
#         self.start_ss = self.start_time.seconds()
#         
#         self.stop_time = self.timeEdit.time()
#         self.stop_dd = self.stop.time.day()
#         self.stop_hh = self.stop.time.hour()
#         self.stop_mm = self.stop.time.minute()
#         self.stop_ss = self.stop.time.second()
# =============================================================================
        
    
    #%% UI setting
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("LUSEM_DATA", "LUSEM_DATA"))
        self.groupBox.setTitle(_translate("LUSEM_DATA", "Connect Setup"))
        self.pushButton.setText(_translate("LUSEM_DATA", "Connect to"))
        self.label.setText(_translate("LUSEM_DATA", "<html><head/><body><p>IP</p></body></html>"))
        self.label_3.setText(_translate("LUSEM_DATA", "<html><head/><body><p>port</p></body></html>"))
        self.pushButton_2.setText(_translate("LUSEM_DATA", "Disconnect"))
        self.label_8.setText(_translate("LUSEM_DATA", "<html><head/><body><p>nbyte</p></body></html>"))
        self.groupBox_3.setTitle(_translate("LUSEM_DATA", "Time Parsing Setup"))
        self.timeEdit_2.setDisplayFormat(_translate("LUSEM_DATA", "dd.hh.mm.ss"))
        self.label_4.setText(_translate("LUSEM_DATA", "<html><head/><body><p><span style=\" font-size:11pt;\">Start time(dd.hh.mm.ss) : </span></p></body></html>"))
        self.timeEdit.setDisplayFormat(_translate("LUSEM_DATA", "dd.hh.mm.ss"))
        self.label_5.setText(_translate("LUSEM_DATA", "<html><head/><body><p><span style=\" font-size:11pt;\">End time(dd.hh.mm.ss) :</span></p></body></html>"))
        self.pushButton_4.setText(_translate("LUSEM_DATA", "New"))
        self.pushButton_3.setText(_translate("LUSEM_DATA", "Write to"))
        self.pushButton_8.setText(_translate("LUSEM_DATA", "Clear"))
        self.pushButton_6.setText(_translate("LUSEM_DATA", "Start"))
        self.groupBox_2.setTitle(_translate("LUSEM_DATA", "Poll Interval Setup"))
        self.timeEdit_3.setDisplayFormat(_translate("LUSEM_DATA", "hh.mm.ss"))
        self.checkBox.setText(_translate("LUSEM_DATA", "Poll Interval :"))
        self.label_2.setText(_translate("LUSEM_DATA", "<html><head/><body><p><span style=\" font-size:11pt;\">Seconds</span></p></body></html>"))
        self.pushButton_5.setText(_translate("LUSEM_DATA", "Execute"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("LUSEM_DATA", "Setting"))
        self.pushButton_7.setText(_translate("LUSEM_DATA", "Save"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("LUSEM_DATA", "Graph_total"))
        self.pushButton_9.setText(_translate("LUSEM_DATA", "Save"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("LUSEM_DATA", "Graph_SOH"))

#%% main
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    executor = ProcessPoolExecutor(max_workers=6)

    MainWindow.show()
        
    p1 = executor.submit(ui.button_event_conn)
    p2 = executor.submit(ui.soh_parsed)
    p3 = executor.submit(ui.sci_update)
    p4 = executor.submit(ui.soh_update)
    p5 = executor.submit(ui.soh_plot)
    p6 = executor.submit(ui.science_plot)

    sys.exit(app.exec_())

